<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>django实现websocket服务器1</title>
    <url>/2021/09/09/django%E5%AE%9E%E7%8E%B0websocket%E6%9C%8D%E5%8A%A1%E5%99%A81/</url>
    <content><![CDATA[<blockquote>
<p>学习使用django利用channels来实现一个简易的websocket服务器(1)</p>
<a id="more"></a>
</blockquote>

        <h1 id="django实现websocket服务器1"   >
          <a href="#django实现websocket服务器1" class="heading-link"><i class="fas fa-link"></i></a><a href="#django实现websocket服务器1" class="headerlink" title="django实现websocket服务器1"></a>django实现websocket服务器1</h1>
      <blockquote>
<p>最近参与的外包项目中提到了创建一个客服服务的需求，如果采用前端轮询服务器，过多的访问话会服务器产生较大的开销。于是就想到了利用webscoket协议尝试进行实现。以下是学习的一些笔记。</p>
</blockquote>
<p>不同于普通的HTTP请求使用的WSGI，websocket要使用ASGI,使用异步调用来进行长连接。</p>

        <h3 id="channels-consumer"   >
          <a href="#channels-consumer" class="heading-link"><i class="fas fa-link"></i></a><a href="#channels-consumer" class="headerlink" title="channels.consumer"></a>channels.consumer</h3>
      <p>channels为我们提供一个consumer的抽象，是我们更好使用ASGI程序。</p>
<p>consumer有两种类型，AsyncConsumer和SyncConsumer。</p>
<p>这是一个使用继承WebsocketConsumer同步消费者视图的简单实现例子，我们要关注不同阶段如connect，diconnect，receive这几个函数。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></div></figure>

<p>对于后端来说，添加类似代码将通道名存入数据库，在websocket创建时将它的通道名self.channel_name保存，发送时调用channel_layer.send( 通道名，… )即可完成信息的发送。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">“Clients.objects.create(channel_name=self.channel_name)”</span><br></pre></td></tr></table></div></figure>


        <h3 id="channel-layers"   >
          <a href="#channel-layers" class="heading-link"><i class="fas fa-link"></i></a><a href="#channel-layers" class="headerlink" title="channel_layers"></a>channel_layers</h3>
      <p>有时我们想要创建一个类似于群聊的东西。这时候我们就要使用通道层来实现不同通道间的通讯。即为实现一个聊天室。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chat/consumers.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> asgiref.sync <span class="keyword">import</span> async_to_sync</span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.room_name = self.scope[<span class="string">'url_route'</span>][<span class="string">'kwargs'</span>][<span class="string">'room_name'</span>]</span><br><span class="line">        self.room_group_name = <span class="string">'chat_%s'</span> % self.room_name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Join room group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_add)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="comment"># Leave room group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_discard)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Receive message from WebSocket</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send message to room group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_send)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'chat_message'</span>,</span><br><span class="line">                <span class="string">'message'</span>: message</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Receive message from room group</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chat_message</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        message = event[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send message to WebSocket</span></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></div></figure>

<p>利用channel_layers我们可以实现通过send和group_send来实现访问不同的websocket通道，来实现单独发送和群发。而不是仅限于对于consumer的操作。</p>
<blockquote>
<p>演示代码来自于<span class="exturl"><a class="exturl__link"   href="https://channels.readthedocs.io/en/stable/"  target="_blank" rel="noopener">https://channels.readthedocs.io/en/stable/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>django中间件</title>
    <url>/2021/04/05/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/"  target="_blank" rel="noopener">Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/"  target="_blank" rel="noopener">documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html"  target="_blank" rel="noopener">troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues"  target="_blank" rel="noopener">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>
<a id="more"></a>


        <h2 id="Quick-Start"   >
          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>
      
        <h3 id="Create-a-new-post"   >
          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html"  target="_blank" rel="noopener">Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Run-server"   >
          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html"  target="_blank" rel="noopener">Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Generate-static-files"   >
          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html"  target="_blank" rel="noopener">Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Deploy-to-remote-sites"   >
          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html"  target="_blank" rel="noopener">Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>django中多对多的实现</title>
    <url>/2021/01/25/django%E4%B8%AD%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[
        <h1 id="django实现一对多和多对多关系"   >
          <a href="#django实现一对多和多对多关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#django实现一对多和多对多关系" class="headerlink" title="django实现一对多和多对多关系"></a>django实现一对多和多对多关系</h1>
      <blockquote>
<p>在使用django项目开发一个简单的api过程中遇到了小小的问题。</p>
<p>1.一个城市有许多的游玩方案（一对多关系）</p>
<p>2.每个游玩方案对应不同的景点（多对多关系）</p>
<p>3.每个游玩方案有不同的酒店（多对多关系）</p>
<a id="more"></a>

<p>这里采用的是django框架给定的模型字段，没有另外设计</p>
</blockquote>

        <h3 id="一对多关系"   >
          <a href="#一对多关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3>
      <p>一个城市有着不同的游玩方案，则需要在游玩方案中加入ForeignKey字段，来对应相应的城市。</p>
<p>如果要创建一个递归关系 – 一个与其自身有多对一关系的对象 – 则使用 <code>models.ForeignKey(&#39;self&#39;, on_delete=models.CASCADE)</code>。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">CASCADEclass cityModel(models.Model):</span><br><span class="line">    city_id  = models.IntegerField(<span class="string">'city_id'</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    city_name = models.CharField(<span class="string">'city_name'</span>,max_length=<span class="number">255</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spot_list</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#使用ForeignKey字段添加关系</span></span><br><span class="line">	spotlist_id = models.ForeignKey(cityModel,on_delete=CASCADE)</span><br></pre></td></tr></table></div></figure>

<p>关于on_delete值从官网截取一段介绍</p>
<ul>
<li><ul>
<li><p><em><code>CASCADE</code><span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.CASCADE"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p><em>Cascade deletes. Django emulates the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey.<a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/instances/#django.db.models.Model.delete" target="_blank" rel="noopener"><code>Model.delete()</code></a> isn’t called on related models, but the <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/signals/#django.db.models.signals.pre_delete" target="_blank" rel="noopener"><code>pre_delete</code></a> and <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/signals/#django.db.models.signals.post_delete" target="_blank" rel="noopener"><code>post_delete</code></a> signals are sent for all deleted objects.</em></p>
</li>
</ul>
</li>
<li><ul>
<li><p><em><code>PROTECT</code><span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.PROTECT"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p><em>Prevent deletion of the referenced object by raising <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/exceptions/#django.db.models.ProtectedError" target="_blank" rel="noopener"><code>ProtectedError</code></a>, a subclass of <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/exceptions/#django.db.IntegrityError" target="_blank" rel="noopener"><code>django.db.IntegrityError</code></a>.</em></p>
</li>
</ul>
</li>
<li><ul>
<li><p><em><code>SET_NULL</code><span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.SET_NULL"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p><em>Set the <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> null; this is only possible if <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field.null" target="_blank" rel="noopener"><code>null</code></a> is <code>True</code>.</em></p>
</li>
</ul>
</li>
<li><ul>
<li><p><em><code>SET_DEFAULT</code><span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.SET_DEFAULT"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p><em>Set the <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> to its default value; a default for the <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> must be set.</em></p>
</li>
</ul>
</li>
<li><ul>
<li><p><em><code>SET</code>()<span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.SET"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p>*Set the <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> to the value passed to <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.SET" target="_blank" rel="noopener"><code>SET()</code></a>, or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported:</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sentinel_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_user_model().objects.get_or_create(username=<span class="string">'deleted'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.ForeignKey(</span><br><span class="line">        settings.AUTH_USER_MODEL,</span><br><span class="line">        on_delete=models.SET(get_sentinel_user),</span><br><span class="line">    )</span><br></pre></td></tr></table></div></figure>
</li>
</ul>
</li>
<li><ul>
<li><p><em><code>DO_NOTHING</code><span class="exturl"><a class="exturl__link"   href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.DO_NOTHING"  target="_blank" rel="noopener">¶</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></em></p>
<p><em>Take no action. If your database backend enforces referential integrity, this will cause an <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/exceptions/#django.db.IntegrityError" target="_blank" rel="noopener"><code>IntegrityError</code></a> unless you manually add an SQL <code>ON DELETE</code> constraint to the database field</em></p>
</li>
</ul>
</li>
</ul>

        <h3 id="多对多关系"   >
          <a href="#多对多关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3>
      <p>每个游玩方案有不同的酒店，可以使用ManyToManyField字段来创建</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">houseModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    house_id = models.IntegerField(<span class="string">'house_id'</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    house_name = models.CharField(<span class="string">'house_name'</span>,max_length=<span class="number">255</span>,default=<span class="string">'无数据'</span>)</span><br><span class="line">    </span><br><span class="line">    house_locate  = models.CharField(<span class="string">'house_locate'</span>,max_length=<span class="number">255</span>,default=<span class="string">'无数据'</span>)</span><br><span class="line"></span><br><span class="line">    house_image = 			          </span><br><span class="line">    models.ImageField(<span class="string">'house_image'</span>,upload_to=<span class="string">'images/house'</span>,default=<span class="string">'images.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    house_prize = models.IntegerField(<span class="string">'house_prize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cityModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    city_id  = models.IntegerField(<span class="string">'city_id'</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    city_name = models.CharField(<span class="string">'city_name'</span>,max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spot_list</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	spotlist_id = models.ForeignKey(cityModel,on_delete=) </span><br><span class="line">	<span class="comment">#添加ManyToManyField字段</span></span><br><span class="line">	houselist = models.ManyToManyField(houseModel)</span><br></pre></td></tr></table></div></figure>




        <h3 id="使用ForeignKey实现多对多关系"   >
          <a href="#使用ForeignKey实现多对多关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用ForeignKey实现多对多关系" class="headerlink" title="使用ForeignKey实现多对多关系"></a>使用ForeignKey实现多对多关系</h3>
      <p>​        每个游玩方案对应不同的景点，但是景点有次序和浏览天数，直接使用ManyToManyField字段是无法直接访问到天数字段的。</p>
<p>​        这时我们可以利用ForeignKey来实现，即新建一个表，表中使用外键将两个表连接起来。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spotlist_spot</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#on_delete=models.PROTECT，不要使用级联删除等方式。</span></span><br><span class="line">    spotlist_id = models.ForeignKey(spotlist,on_delete=models.PROTECT) </span><br><span class="line">    spotmodel_id = models.ForeignKey(spotModel,on_delete=models.PROTECT)</span><br><span class="line">    <span class="comment">#这样我们就可以直接访问到天数了</span></span><br><span class="line">    list_day = models.IntegerField(<span class="string">'list_day'</span>,default=<span class="number">0</span>)</span><br></pre></td></tr></table></div></figure>

<p>其实如果我们从数据库生成的表单来看，用ManyToManyField字段来创建数据库时都是会额外生成一个用于关联的表单，而使用ForeignKey实现多对多关系，就是相当于手动创建了一个用于关联的表单。</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>django实现websocket服务器2</title>
    <url>/2021/09/10/django%E5%AE%9E%E7%8E%B0websocket%E6%9C%8D%E5%8A%A1%E5%99%A82/</url>
    <content><![CDATA[<blockquote>
<p>学习使用django利用channels来实现一个简易的websocket服务器(2)</p>
<a id="more"></a>
</blockquote>

        <h1 id="django实现websocket服务器2"   >
          <a href="#django实现websocket服务器2" class="heading-link"><i class="fas fa-link"></i></a><a href="#django实现websocket服务器2" class="headerlink" title="django实现websocket服务器2"></a>django实现websocket服务器2</h1>
      
        <h3 id="routing"   >
          <a href="#routing" class="heading-link"><i class="fas fa-link"></i></a><a href="#routing" class="headerlink" title="routing"></a>routing</h3>
      <p>channels的路由处理不在常规的django应用的views.py和urls.py中，而是一般是通过consumers.py和routings.py来进行路由处理。同时它的路由也是支持嵌套格式的，同时我们一般在根目录下asgi.py添加相应的相应的路由。</p>

        <h5 id="asgi-py"   >
          <a href="#asgi-py" class="heading-link"><i class="fas fa-link"></i></a><a href="#asgi-py" class="headerlink" title="asgi.py"></a>asgi.py</h5>
      <p>项目配置目录下</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/asgi.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> AuthMiddlewareStack</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">import</span> chat.routings</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"chatserver.settings"</span>)</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">  <span class="string">"http"</span>: get_asgi_application(),</span><br><span class="line">  <span class="string">"websocket"</span>: AuthMiddlewareStack(</span><br><span class="line">        URLRouter(</span><br><span class="line">            <span class="comment">#我们在这里添加项目的路由</span></span><br><span class="line">            chat.routings.websocket_urlpatterns</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>


        <h5 id="routings-py"   >
          <a href="#routings-py" class="heading-link"><i class="fas fa-link"></i></a><a href="#routings-py" class="headerlink" title="routings.py"></a>routings.py</h5>
      <p>对应应用目录下</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chat/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'ws/chat/(?P&lt;room_name&gt;\w+)/$'</span>,consumers.ChatConsumer.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></div></figure>

<p>总体路由操作与普通的urls.py操作也是类似的。</p>
<blockquote>
<p>演示代码来自于<span class="exturl"><a class="exturl__link"   href="https://channels.readthedocs.io/en/stable/"  target="_blank" rel="noopener">https://channels.readthedocs.io/en/stable/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派的自动小风扇</title>
    <url>/2020/08/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%87%AA%E5%8A%A8%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
    <content><![CDATA[<blockquote>
<p>装TTL接线的时候不小心把地线和5V输出引脚连了起来，一天的饭钱就这么没了。</p>
</blockquote>
<a id="more"></a>


        <h1 id="树莓派自动小风扇"   >
          <a href="#树莓派自动小风扇" class="heading-link"><i class="fas fa-link"></i></a><a href="#树莓派自动小风扇" class="headerlink" title="树莓派自动小风扇"></a>树莓派自动小风扇</h1>
      <p>起因：淘宝店给配的风扇转速强劲，声音过大，于是就想做个可以利用cpu温度控制的小电扇。</p>
<p>过程：</p>
<ol>
<li>买配件，PNP三极管一个，子母杜邦线若干，母母杜邦线若干(其实买了一大堆)。</li>
<li>安装到电风扇调试（成功烧坏一天的饭钱）。</li>
<li>编写shell脚本，设置后台运行（nohup $），开机启动(rc.local在新版本的linux没有，开启有些麻烦，就使用crontab的@reboot设置来开机启动了)。</li>
<li>写博客吹水。</li>
</ol>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">sudo gpio mode 1 output</span><br><span class="line">while [[1 == 1]]; do</span><br><span class="line">	cputemp=`sudo cat /sys/class/thermal/thermal_zone0/temp`</span><br><span class="line">	temp=$[ $cputemp/1000]</span><br><span class="line">	if[[ &amp;temp &gt; 51]]; then</span><br><span class="line">		sudo gpio write 1 0</span><br><span class="line">	fi</span><br><span class="line">	</span><br><span class="line">	if [[ $temp &lt;40 ]]; then</span><br><span class="line">		sudo gpio white 1 1</span><br><span class="line">	fi </span><br><span class="line"><span class="meta">	#</span><span class="bash">一个循环歇上4秒</span></span><br><span class="line">	sleep 4</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>水果派</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2020与2021</title>
    <url>/2021/01/01/%E6%88%91%E7%9A%842020%E4%B8%8E2021/</url>
    <content><![CDATA[<blockquote>
<p>2020年算是比较特殊的一年吧，发生了许许多多的事情。</p>
<a id="more"></a>
</blockquote>

        <h1 id="2020我做了什么有趣的事？"   >
          <a href="#2020我做了什么有趣的事？" class="heading-link"><i class="fas fa-link"></i></a><a href="#2020我做了什么有趣的事？" class="headerlink" title="2020我做了什么有趣的事？"></a>2020我做了什么有趣的事？</h1>
      <ul>
<li><p>购买服务器搭建自己的博客。</p>
</li>
<li><p>购置树莓派并进行折腾。</p>
</li>
<li><p>尝试不同的linux发行版，manjaro，ubuntu，deepin…….</p>
</li>
<li><p>参加工作室项目，用django编写后端并完成任务。</p>
</li>
<li><p>结识新的志同道合的朋友。</p>

        <h5 id="追番"   >
          <a href="#追番" class="heading-link"><i class="fas fa-link"></i></a><a href="#追番" class="headerlink" title="追番"></a>追番</h5>
      <p>​        《超炮》《RE:0》《公主连结》《辉夜》《成神》《魔女之旅》《春物》</p>

        <h5 id="补番"   >
          <a href="#补番" class="heading-link"><i class="fas fa-link"></i></a><a href="#补番" class="headerlink" title="补番"></a>补番</h5>
      <p>​        《地下城邂逅》《机器人笔记》《relife》《Re:creator》《路人女主》</p>

        <h5 id="打游戏"   >
          <a href="#打游戏" class="heading-link"><i class="fas fa-link"></i></a><a href="#打游戏" class="headerlink" title="打游戏"></a>打游戏</h5>
      <p>​        《原神》《CSGO》《求生之路》《OSU!》《战争雷霆》《崩崩崩》</p>
</li>
</ul>

        <h1 id="2021我又准备去做什么呢？"   >
          <a href="#2021我又准备去做什么呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#2021我又准备去做什么呢？" class="headerlink" title="2021我又准备去做什么呢？"></a>2021我又准备去做什么呢？</h1>
      <blockquote>
<p>第一次感觉到过去的一年充满了遗憾。在番剧里《春物》《刀剑》《成神》一个一个打破了大家对神作的幻想。在现实中，一次一次的刷新历史的事件也在不断发生。对与自己的发展，我也在不断的摸索与碰壁。不管怎么说2020这一年，我又成功的划水划了过来。虽然有些遗憾但就让今年的我用发展，继续去解决吧。</p>
</blockquote>

        <h5 id="今年可能要干的有趣的事情"   >
          <a href="#今年可能要干的有趣的事情" class="heading-link"><i class="fas fa-link"></i></a><a href="#今年可能要干的有趣的事情" class="headerlink" title="今年可能要干的有趣的事情"></a>今年可能要干的有趣的事情</h5>
      <ul>
<li>工作室的小程序已经上线，但是还有许多功能尚没有完善，还得学习相关知识继续去完善。</li>
<li>数模竞赛的小队已经组建了起来，今年就要尝试去一起学习和参加比赛了。</li>
<li>继续折腾我的树莓派。</li>
<li>后端除了用python也想尝试一下go语言。</li>
</ul>

        <h5 id="今年还会干的有趣的事情"   >
          <a href="#今年还会干的有趣的事情" class="heading-link"><i class="fas fa-link"></i></a><a href="#今年还会干的有趣的事情" class="headerlink" title="今年还会干的有趣的事情"></a>今年还会干的有趣的事情</h5>
      <p>​    追番，补番，打游戏</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>荔枝派天坑(一)</title>
    <url>/2020/09/02/%E8%8D%94%E6%9E%9D%E6%B4%BE%E5%A4%A9%E5%9D%91-%E4%B8%80/</url>
    <content><![CDATA[<blockquote>
<p>第一次这么近距离接触linux内核，虽然基本失败了，但是也找到了一些解决方法，等有时间再重新尝试一下。争取打包出适配flash的镜像文件。</p>
</blockquote>
<a id="more"></a>


        <h1 id="荔枝派天-填-坑-一"   >
          <a href="#荔枝派天-填-坑-一" class="heading-link"><i class="fas fa-link"></i></a><a href="#荔枝派天-填-坑-一" class="headerlink" title="荔枝派天(填)坑(一)"></a>荔枝派天(填)坑(一)</h1>
      <p>2020/9/2</p>
<ol>
<li>修改U-boot源代码适配 spi-flash xt25f128b(修改u-boot代码和内核代码，把ID加入)，并重新编译U-boot系统。(编译失败，待找解决方法)</li>
<li>使用buildroot编译linux的根文件系统。（成功）</li>
<li>编译linux的内核。(失败，可能是因为源码不完整)</li>
</ol>
<hr>
<p>等待后续</p>
]]></content>
      <categories>
        <category>树莓派</category>
        <category>荔枝派</category>
      </categories>
      <tags>
        <tag>水果派</tag>
      </tags>
  </entry>
  <entry>
    <title>用matlab训练一个BP神经网络</title>
    <url>/2021/01/24/%E7%94%A8matlab%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AABP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>BP神经网络</p>
<p>是一种按照误差逆向传播算法训练的多层前馈神经网络，是应用最广泛的神经网络。</p>
<a id="more"></a>

<p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/人工神经网络"  target="_blank" rel="noopener">人工神经网络</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>无需事先确定输入输出之间映射关系的数学方程，仅通过自身的训练，学习某种规则，在给定输入值时得到最接近期望输出值的结果。作为一种智能信息处理系统，人工神经网络实现其功能的核心是算法。BP神经网络是一种按误差反向传播(简称误差反传)训练的多层前馈网络，其算法称为<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/BP算法"  target="_blank" rel="noopener">BP算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，它的基本思想是梯度下降法，利用梯度搜索技术，以期使网络的实际输出值和期望输出值的误差均方差为最小。</p>
<p>基本BP算法包括信号的前向传播和误差的反向传播两个过程。即计算误差输出时按从输入到输出的方向进行，而调整权值和阈值则从输出到输入的方向进行。正向传播时，输入信号通过隐含层作用于输出节点，经过非线性变换，产生输出信号，若实际输出与期望输出不相符，则转入误差的反向传播过程。误差反传是将输出误差通过隐含层向输入层逐层反传，并将误差分摊给各层所有单元，以从各层获得的误差信号作为调整各单元权值的依据。通过调整输入节点与隐层节点的联接强度和隐层节点与输出节点的联接强度以及阈值，使误差沿梯度方向下降，经过反复学习训练，确定与最小误差相对应的网络参数(权值和阈值)，训练即告停止。此时经过训练的神经网络即能对类似样本的输入信息，自行处理输出误差最小的经过非线形转换的信息。</p>
<p>BP网络是在输入层与输出层之间增加若干层(一层或多层)神经元，这些神经元称为隐单元，它们与外界没有直接的联系，但其状态的改变，则能影响输入与输出之间的关系，每一层可以有若干个节点。</p>
<p>BP神经网络的计算过程由正向计算过程和反向计算过程组成。正向传播过程，输入模式从输入层经隐单元层逐层处理，并转向输出层，每～层神经元的状态只影响下一层神经元的状态。如果在输出层不能得到期望的输出，则转入反向传播，将误差信号沿原来的连接通路返回，通过修改各神经元的权值，使得误差信号最小。</p>
<p>1．网络状态初始化</p>
<p>2．前向计算过程</p>
</blockquote>

        <h3 id="首先使用newff函数建立一个BP神经网络"   >
          <a href="#首先使用newff函数建立一个BP神经网络" class="heading-link"><i class="fas fa-link"></i></a><a href="#首先使用newff函数建立一个BP神经网络" class="headerlink" title="首先使用newff函数建立一个BP神经网络"></a>首先使用newff函数建立一个BP神经网络</h3>
      <figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">net = newff(PR,[S1,S2,...SN],&#123;TF1,TF2&#125;,BTF,BLF,PF)</span><br></pre></td></tr></table></div></figure>

<ul>
<li>PR : Rx2矩阵，定义输入向量的最大最小值</li>
<li>Si   : 第i层神经元个数</li>
<li>TF  : 传递函数</li>
<li>BTF : 训练函数</li>
<li>BLF ： 权值/阈值学习函数</li>
<li>PF : 性能函数 </li>
</ul>

        <h3 id="设置相关的训练参数"   >
          <a href="#设置相关的训练参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置相关的训练参数" class="headerlink" title="设置相关的训练参数"></a>设置相关的训练参数</h3>
      <figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">net.trainParam.show = <span class="number">10</span>; <span class="comment">%显示间隔次数</span></span><br><span class="line">net.trainParam.lr = <span class="number">0.05</span>; <span class="comment">%学习率，决定收敛速度 ，收敛效果</span></span><br><span class="line">net.trainParam.goal = <span class="number">1e-10</span>; <span class="comment">%训练目标</span></span><br><span class="line">net.trainParam.epochs = <span class="number">50000</span>; <span class="comment">%训练次数</span></span><br></pre></td></tr></table></div></figure>

<p>算法的选择</p>
<figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">net.trainFcn = <span class="string">'traingd'</span>; <span class="comment">% 梯度下降算法</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traingdm'</span>; <span class="comment">% 动量梯度下降算法</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traingda'</span>; <span class="comment">% 变学习率梯度下降算法</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traingdx'</span>; <span class="comment">% 变学习率动量梯度下降算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (大型网络的首选算法)</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainrp'</span>; <span class="comment">% RPROP(弹性BP)算法,内存需求最小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 共轭梯度算法</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traincgf'</span>; <span class="comment">%Fletcher-Reeves修正算法</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traincgp'</span>; <span class="comment">%Polak-Ribiere修正算法,内存需求比Fletcher-Reeves修正算法略大</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'traincgb'</span>; <span class="comment">% Powell-Beal复位算法,内存需求比Polak-Ribiere修正算法略大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (大型网络的首选算法)</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainscg'</span>; <span class="comment">% ScaledConjugate Gradient算法,内存需求与Fletcher-Reeves修正算法相同,计算量比上面三种算法都小很多</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainbfg'</span>; <span class="comment">%Quasi-Newton Algorithms - BFGS Algorithm,计算量和内存需求均比共轭梯度算法大,但收敛比较快</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainoss'</span>; <span class="comment">% OneStep Secant Algorithm,计算量和内存需求均比BFGS算法小,比共轭梯度算法略大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (中型网络的首选算法)</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainlm'</span>; <span class="comment">%Levenberg-Marquardt算法,内存需求最大,收敛速度最快</span></span><br><span class="line"></span><br><span class="line">net.trainFcn = <span class="string">'trainbr'</span>; <span class="comment">% 贝叶斯正则化算法</span></span><br><span class="line"></span><br><span class="line"> 有代表性的五种算法为:<span class="string">'traingdx'</span>,<span class="string">'trainrp'</span>,<span class="string">'trainscg'</span>,<span class="string">'trainoss'</span>, <span class="string">'trainlm'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%在这里一般是选取'trainlm'函数来训练，其算对对应的是Levenberg-Marquardt算法</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="传入数据开始训练"   >
          <a href="#传入数据开始训练" class="heading-link"><i class="fas fa-link"></i></a><a href="#传入数据开始训练" class="headerlink" title="传入数据开始训练"></a>传入数据开始训练</h3>
      <figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">net = train(net,p,goal);<span class="comment">%net网络模型 p输入数据 goal期望输出</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="对模型进行预测"   >
          <a href="#对模型进行预测" class="heading-link"><i class="fas fa-link"></i></a><a href="#对模型进行预测" class="headerlink" title="对模型进行预测"></a>对模型进行预测</h3>
      <figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">y=sim(net,x)</span><br></pre></td></tr></table></div></figure>


        <h3 id="实例代码"   >
          <a href="#实例代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3>
      <figure class="highlight matlab"><div class="table-container"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">p1=[<span class="number">1.24</span>,<span class="number">1.27</span>;<span class="number">1.36</span>,<span class="number">1.74</span>;<span class="number">1.38</span>,<span class="number">1.64</span>;<span class="number">1.38</span>,<span class="number">1.82</span>;<span class="number">1.38</span>,<span class="number">1.90</span>;</span><br><span class="line"><span class="number">1.40</span>,<span class="number">1.70</span>;<span class="number">1.48</span>,<span class="number">1.82</span>;<span class="number">1.54</span>,<span class="number">1.82</span>;<span class="number">1.56</span>,<span class="number">2.08</span>];</span><br><span class="line">p2=[<span class="number">1.14</span>,<span class="number">1.82</span>;<span class="number">1.18</span>,<span class="number">1.96</span>;<span class="number">1.20</span>,<span class="number">1.86</span>;<span class="number">1.26</span>,<span class="number">2.00</span></span><br><span class="line"><span class="number">1.28</span>,<span class="number">2.00</span>;<span class="number">1.30</span>,<span class="number">1.96</span>];</span><br><span class="line">p=[p1;p2]';</span><br><span class="line">pr=minmax(p);</span><br><span class="line">goal=[<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">9</span>),<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">9</span>),<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">6</span>)];</span><br><span class="line"><span class="built_in">plot</span>(p1(:,<span class="number">1</span>),p1(:,<span class="number">2</span>),<span class="string">'h'</span>,p2(:,<span class="number">1</span>),p2(:,<span class="number">2</span>),<span class="string">'o'</span>)</span><br><span class="line">net=newff(pr,[<span class="number">3</span>,<span class="number">2</span>],&#123;<span class="string">'logsig'</span>,<span class="string">'logsig'</span>&#125;);</span><br><span class="line">net.trainParam.show = <span class="number">10</span>;</span><br><span class="line">net.trainParam.lr = <span class="number">0.05</span>;</span><br><span class="line">net.trainParam.goal = <span class="number">1e-10</span>;</span><br><span class="line">net.trainParam.epochs = <span class="number">50000</span>;</span><br><span class="line">net = train(net,p,goal);</span><br><span class="line">x=[<span class="number">1.24</span> <span class="number">1.80</span>;<span class="number">1.28</span> <span class="number">1.84</span>;<span class="number">1.40</span> <span class="number">2.04</span>]';</span><br><span class="line">y0=sim(net,p)</span><br><span class="line">y=sim(net,x)</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>数模竞赛笔记</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>重新写博客</title>
    <url>/2020/05/18/%E9%87%8D%E6%96%B0%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[
        <h1 id="重新起航-和-一些关于Linux系统杂谈"   >
          <a href="#重新起航-和-一些关于Linux系统杂谈" class="heading-link"><i class="fas fa-link"></i></a><a href="#重新起航-和-一些关于Linux系统杂谈" class="headerlink" title="重新起航 和 一些关于Linux系统杂谈"></a>重新起航 和 一些关于Linux系统杂谈</h1>
      <p>​        之前的博客因为装Linux和Windows双系统把windows的一些给整坏了，数据全部都没了。</p>
<a id="more"></a>所以以此为契机，不如重新写博客吧。之前的博客也都挺水的，没有太多的知识沉淀与总结。



<p>题外话：    在Windows和Linux系统之间反复横跳的我最后理解了，系统之间并没有什么高下之分，只有自己用的舒服就好。Linux系统入坑前，总觉有种高大上的感觉。但最后觉得和Windows一样，都是只是一种生产力工具，要看自己用的舒服和运用领域了。</p>
<p>最后几句：</p>
<p>​        Ubuntu 20.04 LTS 默认桌面 gnome3.36 风格终于变的有现代感了，之前的gnome桌面感觉土里土气的o((&gt;ω&lt; ))o</p>
<p>​        deepin V20 也今年终于发布了，虽然 V15 使用过程中会出现奇怪的问题，但是deepin 个人感觉美化非常好，支持一波国产操作系统。<span class="exturl"><a class="exturl__link"   href="https://www.deepin.org/2020/04/15/deepin-20-beta/"  target="_blank" rel="noopener">deep-20-beta</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<iframe frameborder="0" border="1" 
        marginwidth="0" marginheight="0" 
        width=333 height=77 
        src="//music.163.com/outchain/player?type=2&id=1320584618&auto=1&height=66">
</iframe>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>荔枝派!树莓派!开坑记录</title>
    <url>/2020/08/28/%E8%8D%94%E6%9E%9D%E6%B4%BE-%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<blockquote>

        <h6 id="好久没有写博客了，之前入手了一枚-荔枝派nano，感觉自己目前技术驾驭不了，于是现在就入手了个-树莓派4B-，现在就先写个概要，记录一下之前填的坑和还没填的坑。"   >
          <a href="#好久没有写博客了，之前入手了一枚-荔枝派nano，感觉自己目前技术驾驭不了，于是现在就入手了个-树莓派4B-，现在就先写个概要，记录一下之前填的坑和还没填的坑。" class="heading-link"><i class="fas fa-link"></i></a><a href="#好久没有写博客了，之前入手了一枚-荔枝派nano，感觉自己目前技术驾驭不了，于是现在就入手了个-树莓派4B-，现在就先写个概要，记录一下之前填的坑和还没填的坑。" class="headerlink" title="好久没有写博客了，之前入手了一枚 荔枝派nano，感觉自己目前技术驾驭不了，于是现在就入手了个 树莓派4B ，现在就先写个概要，记录一下之前填的坑和还没填的坑。"></a>好久没有写博客了，之前入手了一枚 荔枝派nano，感觉自己目前技术驾驭不了，于是现在就入手了个 树莓派4B ，现在就先写个概要，记录一下之前填的坑和还没填的坑。</h6>
      </blockquote>
<a id="more"></a>


        <h2 id="荔枝派nano"   >
          <a href="#荔枝派nano" class="heading-link"><i class="fas fa-link"></i></a><a href="#荔枝派nano" class="headerlink" title="荔枝派nano"></a>荔枝派nano</h2>
      <p>​        这算是我第一次接触的arm开发板，这块板子没有太多的资料，感觉对我这种新手极度不友好。不过通过第一次玩板子我第一了解到了flash，TTL串口，嵌入式主板引导程序Uboot，交叉编译工具链。</p>
<p>目前准备填的坑(咕):</p>
<ol>
<li>将Uboot重新编译来完成对flash的分区，将linux装到flash上(之前是装到sd卡上的)。</li>
<li>学习qt或littleGL，尝试给开发板写个简单的可交互的图形界面。</li>
<li>尝试自己通过源码编译一下linux内核。</li>
<li>尝试用这个开发板音频解码，播放音乐和视频。</li>
</ol>

        <h2 id="树莓派"   >
          <a href="#树莓派" class="heading-link"><i class="fas fa-link"></i></a><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h2>
      <p>​        有了荔枝派的铺垫，树莓派的操作就显得特别简单了，如手后先装了ubuntu-server，之后安装了nginx搭建起来了网站，顺便把自动填报得脚本也挂了上去。由于安装的是64位系统,WiringPi没有对应安装包，无法对引脚进行编程，于是在<span class="exturl"><a class="exturl__link"   href="https://github.com/WiringPi/WiringPi"  target="_blank" rel="noopener">官方github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>下载源码重新编译了一个。</p>
<p>目前准备填的坑：</p>
<ol>
<li>让树莓派通过wifi联网，由于用的是ubuntu的64位官方支持不是那么友好，尝试修改boot或直接连接都失败了(也可能是我wifi的问题)。</li>
<li>对引脚进行编程，尝试控制一下LED灯之类的小东西。</li>
<li>发现更多的新坑。</li>
</ol>
]]></content>
      <categories>
        <category>树莓派</category>
        <category>荔枝派</category>
      </categories>
      <tags>
        <tag>水果派</tag>
      </tags>
  </entry>
  <entry>
    <title>django实现websocket服务器3</title>
    <url>/2021/09/10/django%E5%AE%9E%E7%8E%B0websocket%E6%9C%8D%E5%8A%A1%E5%99%A83/</url>
    <content><![CDATA[<blockquote>
<p>通过django的channels实现了一个websocket服务器的总结与感想</p>
<a id="more"></a>
</blockquote>

        <h1 id="django实现websocket服务器2"   >
          <a href="#django实现websocket服务器2" class="heading-link"><i class="fas fa-link"></i></a><a href="#django实现websocket服务器2" class="headerlink" title="django实现websocket服务器2"></a>django实现websocket服务器2</h1>
      <p>接上文《用django实现websocket服务器2》</p>
<p>我们在实现了一个websocket服务器后我们就要进行相应的前后端测试环节。</p>
<p>这里我们前端使用如下简单的代码</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">         <span class="function"><span class="keyword">function</span> <span class="title">WebSocketTest</span><span class="params">()</span></span></span></span><br><span class="line">         &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">"WebSocket"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">               alert(<span class="string">"您的浏览器支持 WebSocket!"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               <span class="comment">// 打开一个 web socket</span></span></span><br><span class="line"><span class="actionscript">               <span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9000/ws/chat/lol/"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">const</span> message = <span class="string">'test-message'</span></span></span><br><span class="line"><span class="javascript">                  ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">'message'</span>: message</span></span><br><span class="line">                &#125;));</span><br><span class="line"><span class="actionscript">                  alert(<span class="string">"数据发送中..."</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">               ws.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span></span></span></span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                  <span class="keyword">var</span> received_msg = e.data;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                  alert(<span class="string">"数据已接收..."</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">               ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 关闭 websocket</span></span></span><br><span class="line"><span class="actionscript">                  alert(<span class="string">"连接已关闭..."</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">else</span></span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">               <span class="comment">// 浏览器不支持 WebSocket</span></span></span><br><span class="line"><span class="actionscript">               alert(<span class="string">"您的浏览器不支持 WebSocket!"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sse"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:WebSocketTest()"</span>&gt;</span>运行 WebSocket<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>



<p>这里我们可以看到前端对于websocket对象有如下代码 <code>onopen</code> <code>onmessage</code> <code>onclose</code> <code>send</code>  来对应 连接建立，接收信息，关闭连接，发送信息 这几个情况。</p>
<p>也与之前channels中consumer的基本操作 <code>connnect</code> <code>receive</code> <code>diconnect</code> <code>send</code>形成了对应。</p>
<p>服务端与客户端建立起链接之后便处于一个对等的位置状态。</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc学习笔记(Go实现)客户端</title>
    <url>/2021/09/14/grpc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Go%E5%AE%9E%E7%8E%B0-%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[
        <h1 id="grpc学习笔记-Go实现-客户端"   >
          <a href="#grpc学习笔记-Go实现-客户端" class="heading-link"><i class="fas fa-link"></i></a><a href="#grpc学习笔记-Go实现-客户端" class="headerlink" title="grpc学习笔记(Go实现)客户端"></a>grpc学习笔记(Go实现)客户端</h1>
      <blockquote>
<p>客户端只用进行代码的调用</p>
<a id="more"></a>
</blockquote>
<p><code>AddBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add one blog test</span></span><br><span class="line">book1 := pb.Blog&#123;Name: <span class="string">"hello c++"</span>&#125;</span><br><span class="line">id1, err := client.AddBlog(ctx, &amp;book1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatalf(<span class="string">"add book error %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"book id %v"</span>, id1.Id)</span><br></pre></td></tr></table></div></figure>

<p><code>GetBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get blog</span></span><br><span class="line">get, err := client.GetBlog(ctx, id1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"get blog %v"</span>, get.Name)</span><br></pre></td></tr></table></div></figure>

<p><code>UpdateBlog</code></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;update blogs</span><br><span class="line">streamUpdateBlogs, err :&#x3D; client.UpdateBlog(ctx)</span><br><span class="line"></span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: &quot;hahahhahaha&quot;&#125;)</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: &quot;zzzzzzzz&quot;&#125;)</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: &quot;hhhhhhhhhh&quot;&#125;)</span><br><span class="line"></span><br><span class="line">s, err :&#x3D; streamUpdateBlogs.CloseAndRecv()</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(&quot;%v&quot;, s.Value)</span><br></pre></td></tr></table></div></figure>

<p><code>SearchBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//update blogs </span></span><br><span class="line">streamUpdateBlogs, err := client.UpdateBlog(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: <span class="string">"hahahhahaha"</span>&#125;)</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: <span class="string">"zzzzzzzz"</span>&#125;)</span><br><span class="line">streamUpdateBlogs.Send(&amp;pb.Blog&#123;Id: id1.Id, Name: <span class="string">"hhhhhhhhhh"</span>&#125;)</span><br><span class="line"></span><br><span class="line">s, err := streamUpdateBlogs.CloseAndRecv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"%v"</span>, s.Value)</span><br></pre></td></tr></table></div></figure>

<p><code>AddBlogs</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//add blogs test</span></span><br><span class="line">	streamAddBlogs, err := client.AddBlogs(ctx)</span><br><span class="line"></span><br><span class="line">	waitChanl := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> asncClientRPC(streamAddBlogs, waitChanl)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"add books stream %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := streamAddBlogs.Send(&amp;pb.Blog&#123;Name: <span class="string">"hello go"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"add  books error %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := streamAddBlogs.Send(&amp;pb.Blog&#123;Name: <span class="string">"hello c"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"add  books error %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := streamAddBlogs.Send(&amp;pb.Blog&#123;Name: <span class="string">"hello java"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"add  books error %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != streamAddBlogs.CloseSend() &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	waitChanl &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">asncClientRPC</span><span class="params">(streamAddBooks pb.BlogManagement_AddBlogsClient, c <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		book_id, err := streamAddBooks.Recv()</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">"asncClientRPC func error %v"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		log.Printf(<span class="string">"books id %v"</span>, book_id.Id)</span><br><span class="line">	&#125;</span><br><span class="line">	&lt;-c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>main.py</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	address = <span class="string">"localhost:8000"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"connect error %v "</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	client := pb.NewBlogManagementClient(conn)</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line">    <span class="comment">//..others...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc学习笔记(Go实现)服务端</title>
    <url>/2021/09/14/grpc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Go%E5%AE%9E%E7%8E%B0-%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[
        <h1 id="grpc学习笔记-Go实现-服务端"   >
          <a href="#grpc学习笔记-Go实现-服务端" class="heading-link"><i class="fas fa-link"></i></a><a href="#grpc学习笔记-Go实现-服务端" class="headerlink" title="grpc学习笔记(Go实现)服务端"></a>grpc学习笔记(Go实现)服务端</h1>
      <a id="more"></a>

<p>protobuf文件的定义</p>
<figure class="highlight protobuf"><div class="table-container"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> protoinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package=<span class="string">"blog-grpc/sevice/protoinfo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Blog</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">BlogID</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">StringValue</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">BlogManagement</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> AddBlog (Blog) <span class="keyword">returns</span> (BlogID)</span>;    </span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> GetBlog (BlogID) <span class="keyword">returns</span> (Blog)</span>;</span><br><span class="line">    <span class="comment">//服务端流式prc</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> SearchBlog (StringValue) <span class="keyword">returns</span> (stream Blog)</span>;</span><br><span class="line">    <span class="comment">//客户端流式rpc</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> UpdateBlog (stream Blog) <span class="keyword">returns</span> (StringValue)</span>;</span><br><span class="line">    <span class="comment">//双向流式RPC</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> AddBlogs (stream Blog) <span class="keyword">returns</span> (stream BlogID)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>服务端方法实现</p>
<p><code>AddBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">AddBlog</span><span class="params">(ctx context.Context, in *pb.Blog)</span> <span class="params">(*pb.BlogID, error)</span></span> &#123;</span><br><span class="line">	out, err := uuid.NewV4()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"set id error %v"</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, status.Errorf(codes.Internal, <span class="string">"set id error"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	in.Id = out.String()</span><br><span class="line">	<span class="keyword">if</span> s.blogMap == <span class="literal">nil</span> &#123;</span><br><span class="line">		s.blogMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*pb.Blog)</span><br><span class="line">	&#125;</span><br><span class="line">	s.blogMap[in.Id] = in</span><br><span class="line">	log.Printf(<span class="string">"add blog %v"</span>, in.Name)</span><br><span class="line">	<span class="keyword">return</span> &amp;pb.BlogID&#123;Id: in.Id&#125;, status.New(codes.OK, <span class="string">""</span>).Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>GetBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">GetBlog</span><span class="params">(ctx context.Context, in *pb.BlogID)</span> <span class="params">(*pb.Blog, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> out, ok := s.blogMap[in.Id]; ok &#123;</span><br><span class="line">		<span class="keyword">return</span> out, status.New(codes.OK, <span class="string">""</span>).Err()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, status.Error(codes.NotFound, <span class="string">"not found"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>SearchBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server stream</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">SearchBlog</span><span class="params">(searchValue *pb.StringValue, stream pb.BlogManagement_SearchBlogServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> key, blog := <span class="keyword">range</span> s.blogMap &#123;</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(blog.Name, searchValue.Value) &#123;</span><br><span class="line">			err := stream.Send(blog)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> fmt.Errorf(<span class="string">"error send message stream %v"</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">			log.Print(<span class="string">"find the key: "</span> + key + <span class="string">"blog: "</span> + blog.Name)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>UpdateBlog</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service stream</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">UpdateBlog</span><span class="params">(stream pb.BlogManagement_UpdateBlogServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		blog, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">return</span> stream.SendAndClose(&amp;pb.StringValue&#123;Value: <span class="string">"update end"</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		s.blogMap[blog.Id] = blog</span><br><span class="line">		log.Printf(<span class="string">"update id: %v \n name: %v"</span>, blog.Id, blog.Name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>AddBlogs</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bi stream</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">AddBlogs</span><span class="params">(stream pb.BlogManagement_AddBlogsServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		blog, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		out, err := uuid.NewV4()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> status.Errorf(codes.Internal, <span class="string">""</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		blog.Id = out.String()</span><br><span class="line">		s.blogMap[blog.Id] = blog</span><br><span class="line">		log.Printf(<span class="string">"add blogs %v"</span>, blog.Name)</span><br><span class="line">		<span class="keyword">if</span> err := stream.Send(&amp;pb.BlogID&#123;Id: blog.Id&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>main.go</code></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	port = <span class="string">"localhost:8000"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lis, err := net.Listen(<span class="string">"tcp"</span>, port)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Printf(<span class="string">"FIAL TO LISTEN %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	s := grpc.NewServer()</span><br><span class="line">	pb.RegisterBlogManagementServer(s, &amp;ma.Server&#123;&#125;)</span><br><span class="line">	log.Printf(<span class="string">"start serve on %v"</span>, port)</span><br><span class="line">	<span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"fail tp serve %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>go micro笔记1</title>
    <url>/2021/10/07/go-micro%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<p><span class="exturl"><a class="exturl__link"   href="https://www.kancloud.cn/linimbus/go-micro"  target="_blank" rel="noopener">go-micro 微服务开发中文手册 · 看云 (kancloud.cn)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://etcd.cn/docs/current/faq/"  target="_blank" rel="noopener">etcd中文文档 | 常见问题解答</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_1/"  target="_blank" rel="noopener">[译]用GoLang实现微服务（一） - 二向箔 (dingkewz.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://ewanvalentine.io/microservices-in-golang-part-1/"  target="_blank" rel="noopener">Create versatile Microservices in Golang - part 1 of 10 part series (ewanvalentine.io)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>MYSQL事务的隔离等级与实现</title>
    <url>/2021/11/16/MYSQL%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[
        <h2 id="一-事务的ACID特性"   >
          <a href="#一-事务的ACID特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#一-事务的ACID特性" class="headerlink" title="一.事务的ACID特性"></a>一.事务的ACID特性</h2>
      <ol>
<li><p>atomic原子性：操作要么成功要么失败。</p>
</li>
<li><p>consistency一致性：事务的开始与结束后事务的完整性没有遭到破坏。</p>
</li>
<li><p>isolation隔离性：事务可能并发执行，但事务之间不会相互感知。</p>
</li>
<li><p>durability持久性：事务完成后对于数据库的改变是永久的。</p>
<a id="more"></a>

</li>
</ol>

        <h2 id="二-事务的隔离等级与其解决的问题"   >
          <a href="#二-事务的隔离等级与其解决的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#二-事务的隔离等级与其解决的问题" class="headerlink" title="二.事务的隔离等级与其解决的问题"></a>二.事务的隔离等级与其解决的问题</h2>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交 RU</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>读已提交 RC</td>
<td>NO</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>可重复读 RR</td>
<td>NO</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr>
<td>可串行化 Serializable</td>
<td>NO</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody></table></div>
<ol>
<li>脏读：在读未提交的过程中，一个事务A读到了事务B的改变的值，但事务B最后回滚了，那么事务A就读到的是一个不能存在的值。</li>
<li>不可重复读：事务A在第一次读取值a时，事务B并没有改变事务a的取值。在第一次读取之后，事务B完成了commit，那么事务A再次读取A值时。会发现两次读取的结果不相同。</li>
<li>幻读： 事务A在读取一系列表记录时，记录s还没有插入到表记录中。此时事务A的读取中没有记录s，但是再次读取时会发现出现了记录s，就像出现了幻觉。所以被称为幻读。</li>
</ol>

        <h3 id="通过加锁的方式来实现不同的事务隔离级别"   >
          <a href="#通过加锁的方式来实现不同的事务隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过加锁的方式来实现不同的事务隔离级别" class="headerlink" title="通过加锁的方式来实现不同的事务隔离级别"></a>通过加锁的方式来实现不同的事务隔离级别</h3>
      <ol>
<li>
        <h5 id="读未提交"   >
          <a href="#读未提交" class="heading-link"><i class="fas fa-link"></i></a><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h5>
      </li>
</ol>
<div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>读</th>
<th>写</th>
</tr>
</thead>
<tbody><tr>
<td>读</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>写</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody></table></div>
<p>​       在RU中可能会读到其他事务未提交的数据，如果事务回滚可能会产生<strong>脏读</strong>，只存在写写互斥。</p>

        <h5 id="2-读已提交"   >
          <a href="#2-读已提交" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-读已提交" class="headerlink" title="2.读已提交"></a>2.读已提交</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>读</th>
<th>写</th>
</tr>
</thead>
<tbody><tr>
<td>读</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>写</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody></table></div>
<p>​       在RC中只能读取已提交数据，但是依然没有读写锁。所以导致同一事务在两次读取同一记录产生不一致的情况。也就是<strong>不可重复读</strong>。</p>
<ol start="3">
<li>
        <h5 id="可重复读"   >
          <a href="#可重复读" class="heading-link"><i class="fas fa-link"></i></a><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h5>
      </li>
</ol>
<div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>读</th>
<th>写</th>
</tr>
</thead>
<tbody><tr>
<td>读</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>写</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody></table></div>
<p>​        在RR隔离等级当中出现了读锁，即mysql当中以 <strong>共享锁</strong> 。读锁不互斥，读写锁相互互斥。共享锁可以由多个事务同时获取，但是当两个即以上的事务持有改记录的共享锁时，当前记录是只读的。对于一个不存在的记录是无法进行加锁，当有新纪录加入时，会使一个事务两次读取产生不同的结果，也就是会出现<strong>幻读</strong>。</p>
<ol start="4">
<li>
        <h5 id="可串行化"   >
          <a href="#可串行化" class="heading-link"><i class="fas fa-link"></i></a><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h5>
      <p>完全串行化的读，每次读写都需要获得表级共享锁，读写相互都会阻塞。</p>
</li>
</ol>
<blockquote>
<p>但是在mysql当中一定是这样实现的么？</p>
</blockquote>

        <h2 id="三-MYSQL当中不同的锁"   >
          <a href="#三-MYSQL当中不同的锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#三-MYSQL当中不同的锁" class="headerlink" title="三. MYSQL当中不同的锁"></a>三. MYSQL当中不同的锁</h2>
      
        <h5 id="1-共享锁"   >
          <a href="#1-共享锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-共享锁" class="headerlink" title="1.共享锁"></a>1.共享锁</h5>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">--共享锁</span><br><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 LOCK IN SHARE MODE;</span><br><span class="line">UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&quot;aa1&quot; WHERE &#96;id&#96; &#x3D; 1 ;</span><br><span class="line">COMMIT;</span><br><span class="line">--干扰项</span><br><span class="line">-- BEGIN;</span><br><span class="line">-- SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 LOCK IN SHARE MODE;</span><br><span class="line">-- COMMIT;</span><br></pre></td></tr></table></div></figure>

<p>当有两个以上事务获得同一记录的共享锁时则为只可进行读操作。如干扰项加锁后，第一个事务执行update语句将被blocked掉，直到第二个事务被提交后才可以运行。</p>

        <h5 id="2-记录锁"   >
          <a href="#2-记录锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-记录锁" class="headerlink" title="2.记录锁"></a>2.记录锁</h5>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">--排它锁</span><br><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 FOR UPDATE;</span><br><span class="line">UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&quot;aa1&quot; WHERE &#96;id&#96; &#x3D; 1 ;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></div></figure>

<p>记录锁为排它锁，获取锁后其余关于该记录的操作都会被blocked掉。</p>
<p>当然，如果该条记录有共享锁时，是无法被获取排它锁的。</p>

        <h5 id="3-自增锁"   >
          <a href="#3-自增锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-自增锁" class="headerlink" title="3.自增锁"></a>3.自增锁</h5>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">--自增锁</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;name&#96;) VALUES(&#39;C1-SE&#39;);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;name&#96;) VALUES(&#39;C2-FI&#39;);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></div></figure>

<p>执行事务1的插入语句但<strong>不提交</strong>，执行事务二的插入语句后<strong>并提交</strong>，会发现C1-SE的id比C2-F1的id大。</p>

        <h5 id="4-间隙锁"   >
          <a href="#4-间隙锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-间隙锁" class="headerlink" title="4.间隙锁"></a>4.间隙锁</h5>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line"></span><br><span class="line">SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; &gt; 1 FOR UPDATE;</span><br><span class="line"></span><br><span class="line">SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; BETWEEN 5 AND 7 FOR UPDATE;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></div></figure>

<p>间隙锁，在RR级事务下有效。通过锁一个区域的记录来防止<strong>幻读</strong>。</p>

        <h2 id="四-再回头看MYSQL又是如何解决这些问题？"   >
          <a href="#四-再回头看MYSQL又是如何解决这些问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#四-再回头看MYSQL又是如何解决这些问题？" class="headerlink" title="四. 再回头看MYSQL又是如何解决这些问题？"></a>四. 再回头看MYSQL又是如何解决这些问题？</h2>
      
        <h5 id="不通过加锁实现可重复读。"   >
          <a href="#不通过加锁实现可重复读。" class="heading-link"><i class="fas fa-link"></i></a><a href="#不通过加锁实现可重复读。" class="headerlink" title="不通过加锁实现可重复读。"></a>不通过加锁实现可重复读。</h5>
      <p>通过MVCC来实现读写分离，并解决可重复读问题。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">BEGIN ;</span><br><span class="line">SELECT *FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 ;</span><br><span class="line">SELECT *FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 ;</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM &#96;student&#96; WHERE &#96;id&#96; &#x3D; 1 FOR UPDATE;</span><br><span class="line">UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&quot;aaa1&quot; WHERE &#96;id&#96; &#x3D; 1 ;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></div></figure>

<p>在RR隔离下第二条事务提交前后都进行第一条事务的一次查询，会发现两次的结果都是旧数据，而不是已经更新的数据。</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
